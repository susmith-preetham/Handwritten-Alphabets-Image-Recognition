!pip install streamlit
!pip install pyngrok
!pip install streamlit-drawable-canvas 
from pyngrok import ngrok


!apt-get -qq install -y libsm6 libxext6 && pip install -q -U opencv-python

model_xgb.save_model("xgb_model.json")

import numpy as пр
import cv2
import streamlit as st
from streamlit_drawable_canvas import st_canvas
model_xgb_2 = xgb.Booster()
model = model_xgb_2.load_model("/content/xgb_model.json")
st.title('My Digit Recognizer')
st.markdown('''
write Digit V Downhere
 ''')
SIZE = 192


# Create a canvas component
canvas_result = st_canvas(
     fill_color="#ffffff", # Fixed fill color with some opacity
     stroke_width=10,
     stroke_color="#ffffff",
     background_color="#000000",
     height=150,width=150,
     drawing_mode= 'freedraw',
     key="canvas"
)


if canvas_result.image_data is not None:
    img = cv2.resize(canvas_result.image_data.astype('uint8'), (28, 28))
    img_rescaling= cv2.resize(img, (SIZE, SIZE), interpolation=cv2.INTER_NEAREST)
    st.write('Input Image')
    st.image(img_rescaling)

if st.button('Predict'):
    test_x = cv2.cvtcolor(img, cv2.COLOR_BGR2GRAY)
    pred = model.predict(test_x.reshape(1, 28, 28))
    st.write(f"result: {np.argmax(pred[0])}")
    st.bar_chart(pred[0])



!pip install streamlit
!pip install pyngrok
!pip install streamlit-drawable-canvas 
from pyngrok import ngrok

!apt-get -qq install -y libsm6 libxext6 && pip install -q -U opencv-python

model_xgb.save_model("xgb_model.json")

import numpy as пр
import cv2
import streamlit as st
from streamlit_drawable_canvas import st_canvas
model_xgb_2 = xgb.Booster()
model = model_xgb_2.load_model("/content/xgb_model.json")
st.title('My Digit Recognizer')
st.markdown('''
write Digit V Downhere
 ''')
SIZE = 192

# Create a canvas component
canvas_result = st_canvas(
     fill_color="#ffffff", # Fixed fill color with some opacity
     stroke_width=10,
     stroke_color="#ffffff",
     background_color="#000000",
     height=150,width=150,
     drawing_mode= 'freedraw',
     key="canvas"
)


if canvas_result.image_data is not None:
    img = cv2.resize(canvas_result.image_data.astype('uint8'), (28, 28))
    img_rescaling= cv2.resize(img, (SIZE, SIZE), interpolation=cv2.INTER_NEAREST)
    st.write('Input Image')
    st.image(img_rescaling)

if st.button('Predict'):
    test_x = cv2.cvtcolor(img, cv2.COLOR_BGR2GRAY)
    pred = model.predict(test_x.reshape(1, 28, 28))
    st.write(f"result: {np.argmax(pred[0])}")
    st.bar_chart(pred[0])




%%writefile mnist_pred.py
import numpy as np
import cv2
import pickle
import streamlit as st
from streamlit_drawable_canvas import st_canvas
import xgboost as xgb
from xgboost import XGBClassifier


model = pickle.load(open("/content/xgboost_model.pkl", "rb"))

st.title('Alphabet Recognizer')
st.markdown('''
Write an Alphabet 
''')

SIZE = 192

# Create a canvas component
canvas_result = st_canvas(
    fill_color="#ffffff",  # Fixed fill color with some opacity
    stroke_width=10,
    stroke_color="#ffffff",
    background_color="#000000",
    height=150,
    width=150,
    drawing_mode='freedraw',
    key="canvas"
)

if canvas_result.image_data is not None:
    img = cv2.resize(canvas_result.image_data.astype('uint8'), (28, 28))
    img_rescaling = cv2.resize(img, (SIZE, SIZE), interpolation=cv2.INTER_NEAREST)
    st.write('Input Image')
    st.image(img_rescaling)

if st.button('Predict'):
    test_x = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    pred = model.predict(test_x.reshape(1, 28, 28))
    st.write(f"Result: {np.argmax(pred[0])}")
    



%%writefile mnist_pred.py
import numpy as np
import cv2
import pickle
import streamlit as st
from streamlit_drawable_canvas import st_canvas
import xgboost as xgb
from xgboost import XGBClassifier
import matplotlib.pyplot as plt
import pandas as pd
from PIL import Image


model = pickle.load(open("/content/xgboost_model.pkl", "rb"))

st.title('Alphabet Recognizer')
st.markdown('''
Write an Alphabet 
''')

SIZE = 192

# Create a canvas component
canvas_result = st_canvas(
    fill_color="#ffffff",  # Fixed fill color with some opacity
    stroke_width=10,
    stroke_color="#ffffff",
    background_color="#000000",
    height=150,
    width=150,
    drawing_mode='freedraw',
    key="canvas"
)

if canvas_result.image_data is not None:
    img = canvas_result.image_data
    img = Image.open(img)
    img = img.resize((28,28)).convert("L")
    img = np.array(img).flatten().tolist()
    st.image(img)
    

if st.button('Predict'):
    
    pred = model.predict(img[0])
    st.write(f"Result: {pred} ")
    



%%shell
streamlit run mnist_pred.py


%%writefile mnist_alpha_pred.py
import numpy as np
import cv2
import pickle
import streamlit as st
from streamlit_drawable_canvas import st_canvas
import xgboost as xgb
from xgboost import XGBClassifier
import matplotlib.pyplot as plt
import pandas as pd
from PIL import Image



model = pickle.load(open("xgboost_model.pickle", "rb"))
stroke_width = st.sidebar.slider("Stroke width: ", 1, 35, 32)
stroke_color = st.sidebar.color_picker("Stroke color hex: ")
bg_color = st.sidebar.color_picker("Background color hex: ", "#eee")
bg_image = st.sidebar.file_uploader("Background image:", type=["png", "jpg"])
drawing_mode = st.sidebar.selectbox(
    "Drawing tool:", ("freedraw", "line", "rect", "circle", "transform", "polygon")
)
realtime_update = st.sidebar.checkbox("Update in realtime", True)

# Create a canvas component
canvas_result = st_canvas(
    fill_color="rgba(255, 165, 0, 0.3)",  # Fixed fill color with some opacity
    stroke_width=stroke_width,
    stroke_color=stroke_color,
    background_color=bg_color,
    background_image=Image.open(bg_image) if bg_image else None,
    update_streamlit=realtime_update,
    height=300,
    drawing_mode=drawing_mode,
    display_toolbar=st.sidebar.checkbox("Display toolbar", True),
    key="full_app",
)

# Do something interesting with the image data and paths
if canvas_result.image_data is not None:
    #st.image(canvas_result.image_data)
    image = canvas_result.image_data
    image1 = image.copy()
    image1 = image1.astype('uint8')
    image1 = cv2.cvtColor(image1,cv2.COLOR_BGR2GRAY)
    image1 = cv2.resize(image1,(28,28))
    st.image(image1)

    image1.resize(1,28,28,1)
    st.title(np.argmax(model.predict(image1)))


%%shell
streamlit run mnist_alpha_pred.py